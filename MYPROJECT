<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Tic Tac Toe</title>
  <style>
    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      padding: 0;
      background: #0f2027;
      background: linear-gradient(to right, #2c5364, #203a43, #0f2027);
      font-family: 'Segoe UI', sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      color: white;
    }

    h1 {
      margin-bottom: 10px;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 5px;
    }

    .cell {
      width: 100px;
      height: 100px;
      background: rgba(255, 255, 255, 0.1);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2.5rem;
      cursor: pointer;
      border-radius: 10px;
      transition: background 0.2s ease;
    }

    .cell:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .status {
      margin-top: 20px;
      font-size: 20px;
      min-height: 24px;
    }

    .reset-btn {
      margin-top: 15px;
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      background-color: #00c9ff;
      color: white;
      border-radius: 5px;
      cursor: pointer;
      transition: 0.3s ease;
    }

    .reset-btn:hover {
      background-color: #009bbd;
    }

    @media (max-width: 400px) {
      .board {
        grid-template-columns: repeat(3, 80px);
        grid-template-rows: repeat(3, 80px);
      }

      .cell {
        width: 80px;
        height: 80px;
        font-size: 2rem;
      }
    }
  </style>
</head>
<body>

  <h1>Tic Tac Toe</h1>
  <div class="board" id="board">
    <!-- 9 cells will be generated by JS -->
  </div>
  <div class="status" id="status">Player X's Turn</div>
  <button class="reset-btn" onclick="resetGame()">Reset Game</button>

  <script>
    const board = document.getElementById('board');
    const statusText = document.getElementById('status');
    let currentPlayer = 'X';
    let gameActive = true;
    let cells = Array(9).fill('');

    // Winning combinations
    const winningCombos = [
      [0,1,2], [3,4,5], [6,7,8], // rows
      [0,3,6], [1,4,7], [2,5,8], // cols
      [0,4,8], [2,4,6]           // diagonals
    ];

    // Generate board cells
    function createBoard() {
      board.innerHTML = '';
      cells.forEach((val, i) => {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.dataset.index = i;
        cell.textContent = val;
        cell.addEventListener('click', handleClick, { once: true });
        board.appendChild(cell);
      });
    }

    // Handle player move
    function handleClick(e) {
      if (!gameActive) return;

      const index = e.target.dataset.index;
      cells[index] = currentPlayer;
      e.target.textContent = currentPlayer;

      if (checkWinner()) {
        statusText.textContent = `Player ${currentPlayer} Wins! 🎉`;
        gameActive = false;
      } else if (cells.every(cell => cell !== '')) {
        statusText.textContent = `It's a Draw! 🤝`;
        gameActive = false;
      } else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        statusText.textContent = `Player ${currentPlayer}'s Turn`;
      }
    }

    // Check winning condition
    function checkWinner() {
      return winningCombos.some(combo => {
        const [a, b, c] = combo;
        return cells[a] && cells[a] === cells[b] && cells[a] === cells[c];
      });
    }

    // Reset game
    function resetGame() {
      currentPlayer = 'X';
      gameActive = true;
      cells = Array(9).fill('');
      statusText.textContent = `Player X's Turn`;
      createBoard();
    }

    createBoard(); // Initialize on load
  </script>

</body>
</html>
